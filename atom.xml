<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Alexander Kutsan</title>
    <subtitle>Software engineer, cybersecurity enthusiast</subtitle>
    <link rel="self" type="application/atom+xml" href="https://alexkutsan.github.io/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://alexkutsan.github.io"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2025-06-01T00:00:00+00:00</updated>
    <id>https://alexkutsan.github.io/atom.xml</id>
    <entry xml:lang="en">
        <title>Crystal Lang Fibers Profiling</title>
        <published>2025-06-01T00:00:00+00:00</published>
        <updated>2025-06-01T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://alexkutsan.github.io/posts/crystal-lang-fibers-profiling/"/>
        <id>https://alexkutsan.github.io/posts/crystal-lang-fibers-profiling/</id>
        
        <summary type="html">&lt;p&gt;Crystal&#x27;s fiber-based concurrency model enables elegant single-threaded development, but performance bottlenecks can be difficult to debug—especially when a misbehaving fiber monopolizes CPU time and freezes the entire application.&lt;&#x2F;p&gt;
&lt;p&gt;Crystal’s runtime tracing can help identify which fibers consume the most resources. However, the traditional approach requires enabling tracing at startup, which is impractical for long-running services since it generates gigabytes of logs.&lt;&#x2F;p&gt;
&lt;p&gt;Fortunately, Crystal’s monkey-patching capabilities allow us to dynamically enable scheduler tracing using Unix signals, offering a lightweight and practical way to diagnose fiber-related performance issues in production applications.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Brutforce http on dvwa example</title>
        <published>2024-01-20T00:00:00+00:00</published>
        <updated>2024-01-20T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://alexkutsan.github.io/posts/dvwa-brutforce/"/>
        <id>https://alexkutsan.github.io/posts/dvwa-brutforce/</id>
        
        <summary type="html">&lt;p&gt;Generally, brute-forcing is not an effective method of penetration. However, in many cases, people do not really care about the strong protection of things they do not consider sensitive or important, such as WiFi passwords or router admin page credentials. Additionally, people often use simple passwords for frequently accessed accounts, such as mobile unlock passwords or notebook&#x2F;PC user passwords.&lt;&#x2F;p&gt;
&lt;p&gt;In these cases, brute-forcing becomes a realistic approach to gaining access to the system, especially if the system lacks additional protections like rate limits.&lt;&#x2F;p&gt;</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Blog Posts Functionality</title>
        <published>2024-01-20T00:00:00+00:00</published>
        <updated>2024-01-20T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://alexkutsan.github.io/posts/posts-functionality/"/>
        <id>https://alexkutsan.github.io/posts/posts-functionality/</id>
        
        <summary type="html">&lt;p&gt;I am using Zola as a static site generator with theme. It provides an easy way to create posts in Markdown, requiring minimal configuration. Despite its simplicity, it is feature-rich and has no JavaScript&#x2F;npm dependencies.&lt;&#x2F;p&gt;
&lt;p&gt;In this post, I am exploring various useful abilities of Markdown&#x2F;HTML that can enhance blog posts.&lt;&#x2F;p&gt;</summary>
        
    </entry>
</feed>
